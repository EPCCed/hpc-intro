To demonstrate, let's load the `abinit` module and then use the `module list` command to show
which modules we currently have loaded in our environment. ([Abinit](https://www.abinit.org/) is an open source 
materials science modelling software package.)

```
{{ site.host_prompt }} module load abinit
{{ site.host_prompt }} module list
```
{: .bash}
```
Currently Loaded Modulefiles:
Currently Loaded Modulefiles:
  1) modules/3.2.10.6
  2) eswrap/1.3.3-1.020200.1280.0
 ...
 33) anaconda/python3
 34) abinit/7.10.4
```
{: .output}

So in this case, loading the `abinit` module
also loaded a variety of other modules.
Let's try unloading the `abinit` package.

```
{{ site.host_prompt }} module unload abinit
{{ site.host_prompt }} module list
```
{: .bash}
```
Currently Loaded Modulefiles:
  1) modules/3.2.10.6
  2) eswrap/1.3.3-1.020200.1280.0
 ...
 33) anaconda/python3
```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies.
If we wanted to unload everything at once, we could run `module purge` (unloads everything).

```
{{ site.host_prompt }} module load abinit
{{ site.host_prompt }} module purge
```
{: .bash}
```
No Modulefiles Currently Loaded.
```
{: .output}

Note that `module purge` has removed the `anaconda/python3` module as well as `abinit` and its dependencies.
