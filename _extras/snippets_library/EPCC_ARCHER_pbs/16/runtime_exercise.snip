> ## Benchmarking the parallel performance
> Modify your job script to run on multiple cores and evaluate the performance of `sharpen`
> on a variety of different core counts and use multiple runs to complete a table like the one
> below.
>
> If you examine the log file you will see that it contains two timings: the total time taken by the
> entire program (including IO) and the time taken solely by the calculation. The image input
> and output is not parallelised so this is a serial overhead, performed by a single processor.
> The calculation part is, in theory, perfectly parallel (each processor operates on different parts
> of the image) so this should get faster on more cores. The IO time in the table below is the
> difference between the calculation time and the overall run time; the total core seconds is the
> *calculation time* multiplied by the number of cores.
> 
> | Cores      | Overall run time (s) | Calculation time (s) | IO time (s) | Total core seconds |
> |------------|----------------------|----------------------|-------------|--------------------|
> | 1 (serial) |                      |                      |             |                    |
> | 2          |                      |                      |             |                    |
> | 4          |                      |                      |             |                    |                    
> | 8          |                      |                      |             |                    | 
> | 12         |                      |                      |             |                    | 
> | 24         |                      |                      |             |                    | 
> | 48         |                      |                      |             |                    |              
> | 96        |                      |                      |             |                 |
> 
> Look at your results â€“ do they make sense? Given the structure of the code, you would
> expect the IO time to be roughly constant and the performance of the calculation to increase
> linearly with the number of cores: this would give a roughly constant figure for the total core
> time. Is this what you observe?
> > ## Solution
> >
> > | Cores      | Overall run time (s) | Calculation time (s) | IO time (s) | Total core seconds |
> > |------------|----------------------|----------------------|-------------|--------------------|
> > |	1	|	5.544246	|	5.410836	|	0.13341	|	5.410836	|
> > |	2	|	2.917452	|	2.804676	|	0.112776	|	5.609352	|
> > |	4	|	1.609339	|	1.48881	|	0.120529	|	5.95524	|
> > |	8	|	0.924753	|	0.793237	|	0.131516	|	6.345896	|
> > |	12	|	0.665114	|	0.530394	|	0.13472	|	6.364728	|
> > |	24	|	0.40722	|	0.268055	|	0.139165	|	6.43332	|
> > |	48	|	0.315862	|	0.136599	|	0.179263	|	6.556752	|
> > |	96	|	0.239602	|	0.071997	|	0.167605	|	6.911712	|
> >
> > ![sharpen runtime]({{ site.url }}{{ site.baseurl }}/fig/runtime.png)
> > ![log sharpen runtime]({{ site.url }}{{ site.baseurl }}/fig/logruntime.png)
> {: .solution}
{: .challenge}
